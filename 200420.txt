연산자
 -증감연산자:최종적으로 1증가/1감소한다
1.전위형:(연산자)A,++A,--A,증가후 동작
2.후위형:A(연산자),A++,A--,동작후 증가

 -부호연산자 : - :부호를 반대로

산술연산자:+ - * / %

1+2=>3
1.2+3=4.2
3*3=>9
3.1*3=>9.3
1/2=>0
1.0/2=>0.5
정수 연산자 정수 => 정수
정수 연산자 실수 => 실수
실수 연산자 정수 => 실수
실수 연산자 실수 => 실수
-정수/정수는 결과가 정수이어서 소수점이 사라져 원하는 결과가 나오지 않을 수 있다.

%:나머지 연산자, A%B => A를 B로 나누었을 때 나머지
5%3=>2
%의 결과는 0~B-1사이의 값이다.
%는 주로 배수(홀짝),약수를 구할 때 사용
정수 연산자 정수를 할 때는 int로 변환하여 계산한다.
byte c=(byte)30

대입연산자 : =
 - 오른쪽에 있는 값을 왼쪽에 저장
 - 왼쪽에는 상수가 없다.
 - 왼쪽에는 연산자가 올 수 없다.

x=2
2=x

비교연산자 : <,>,<=,==,!=
- 비교연산자는 결과가 참 또는 거짓으로 나온다
-결과가 참 또는 거짓만 나오는 식을 조건식이라 한다,
-비교연산자는 일반 자료형에서만 정상 동작을 한다.

논리연산자:&&,||,!
&&:~하고, 둘다 참인 경우만 참,나머진 다 거짓
ex)A학점:성적이 90점 이상이고, 100점이하이면
|| : ~하거나, 둘다거짓인 경우만 거짓, 나머지는 다 참
!:반대
-논리 연산자는 조건식 중 하나이다.

비트 연산자
-비트논리연산자 :&,|,~,^
int num1=12,num2=10;
int num3 =num1 & num2;
int num4 =num1|num2;
int num5 = num1 ^ num2
int num6 = ~num1;
12: 00000000 00000000 00000000 00001100
10: 00000000 00000000 00000000 00001010
 8: 00000000 00000000 00000000 00001000 (num1 & num2)
14: 00000000 00000000 00000000 00001110 (num1 |num2)
 6: 00000000 00000000 00000000 00000110 (num1^num2)

-비트쉬프트연산자:<<,>>
<<:비트를 왼쪽으로 이동
>>:비트를 오른쪽으로 이동
비트쉬프트 연산자는 비트를 이동시킨 후에 남은 자리는 부호비트로 채운다.

조건연산자 (삼항연산자)
(조건식)?참:거짓;
변수=(조건식)?참:거짓;

int num = 4
boolean isEven = (num%2 ==0) ?true:false;
boolean isOdd = (num%2 ==0) ?false:true;
조건문 : ~하면/라면/이면 ...한다
 -if문 : 모든 조건문은 if문으로 표현 가능하다
 - switch문 : 상황에 따라 switch문으로 표현하면 if문보다 간결하게 표현 가능하다
 -if문 기본 문법
~하면 ...한다에서 ~은 조건식에 해당하고, ...은 실행문에 해당한다.

조건식1이 참이면 실행문1을 실행해라
if(조건식1){
	실행문1;
}else if(조건식2){//조건식1이 거짓이고 조건식2가 참이면 실행문2를 실행
	실행문2;
}else{//현재 위치를 기준으로 위에 있는 모든 조건식이 거짓이면
	실행문3;
}
else는 조건식이 없다

num가 짝수이면 짝수라고 출력한다.
if(num가 짝수이다){
	num가 짝수라고 출력;
}

if(num를 2로 나누었을 때 나머지가 0이다){
	num는 짝수라고 출력;
}

if(num % 2 == 0){
	system.out.println(num+"는 짝수");
}



}else if(조건식


중첩 if문 : if문 안에 실행문으로 if문이 오는 경우
if(조건식1){
	if(조건식2){
		실행문1;
	]
}


switch문

switch(변수나 식){
case 값1:
	실행문1;
	break;
case 값2:
	실행문2;
	break;
default:
	실행문3;
}
if(변수나 식 ==값1){
	실행문1;
}else if(변수나 식 ==값2){
	실행문2;
}else{
	실행문3;


반복문
 - 규칙성을 가진 작업을 반복적으로 할 때 사용
1. 규칙성 찾기
2. 반복횟수

for, while		do while
for문 문법
for(1.초기화; 2.5.8조건식 ; 4.7.증감연산식){
	3.6실행문;
}
1.초기화:조건식이나 실해운에서 사용하는 변수의 값을 초기화 하는곳으로 생략할 수 있고, 
	여러 변수를 , 를 통해 초기화 할 수 있다.
2.조건식:반복문이 실행되기 위한 조건으로 참이면 반복문을 계속 실행, 거짓이면 반복문을 종료,
	생략 할 수 있으며 생략할 경우 무조건 참.
3.실행문
4.증감연산식:조건식에서 사용하는 변수를 증가 또는 감소 시켜서
	반복횟수를 조절, 생략 할 수 있음.
반복문에서 반복횟수는 초기화+조건식+증감연산식이 함께 관여한다.