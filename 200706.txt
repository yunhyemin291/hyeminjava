1. 변수
-일반변수:값을 저장하는 변수
*정수형:int,byte,short,long
*실수형:float,double
*문자형:char
-참조변수:주소를 저장하는 변수
-자료형변환:변수나 상수값의 자료형을 일시적으로 다른 자료형으로 변환
*자동:정수->실수, 작은 바이트->큰 바이트
*명시적:자동 자료형변환이 되지 않아서 에러가 발생하거나 자료형변환이 필요한 경우
float vs double
-4바이트 vs 8바이트
-소수점 7자리 vs 소수점 15자리
-접미사 f필요 vs 접미사 필요 없음

2.연산자
-대입연산자(=)
*오른쪽에 있는 값을 왼쪽에 저장
*왼쪽에는 무조건 변수(객체)가 와야한다.
*왼쪽과 오른쪽의 자료형이 같아야 한다.
*다르다면 오른쪽에 있는 값의 자료형이 왼쪽에 있는 값의 자료형으로 형변환이 가능해야한다.
-산술연산자(+,-,*,/,%)
*/:0으로 나눌 수 없다. 정수/정수=>정수
-논리연산자(&&,||,!)
*결과가 참 또는 거짓=>조건식
*&&:~하고,둘다 참이면 참, 나머진 다 거짓
*||:~하거나, 둘다 거짓이면 거짓, 나머진 다 참
*!:반대, 거짓이면 참, 참이면 거짓
-비교연산자(<,>,<=,>=,==,!=)
*조건식
*==와 =을 구별
-조건선택연산자(조건식?값1:값2;)
*조건식이 참이면 값1을, 거짓이면 값2를 선택
-증감연산자(++,--)
*최종적으로 1증가, 1감소

3.조건식:~하면 ...한다. ~:조건식,...:실행문
-if문
//조건식1이 참이면 실행문1실행
if(조건식1){
	실행문1;
//조건식1이 거짓이고 조건식2가 참이면 실행문2 실행
}else if(조건식2){
	실행문2;
//조건식1과 2 둘다 거짓이면 실행문3 실행
}else{
	실행문3;
}

-switch문
switch(변수){
//변수가 값1과 같으면 실행문1을 실행
case 값1:
	실행문1;
	break;
//변수가 값1과 다르고, 값2와 같으면 실행문2를 실행
case 값2:
	실행문2;
	break;
//변수가 값1과 2와 같지않으면 실행
default:
	실행문3;
}
*변수가 사용하는 값이 제한적인 때
*변수가 아닌 식이 들어가서 식의 값이 제한적일 때(%)

4.반복문:규칙성,반복횟수
-for문
for(1.초기화;2.조건식;4.증감연산식){
	3.실행문;
}
1.초기화:조건식이나 실행문에서 사용하는 변수를 초기화, 생략 가능
2.조건식:반복문이 실행되기 위한 조건으로, 참이면 반복문 실행,거짓이면 반복문 종료,생략 가능
4.증감연산식:조건식에서 사용하는 변수를 증가 또는 감소=>반복횟수를 조정하기 위해, 생략 가능
-while문
while(조건식){
	실행문;
}
-do while문
do{
	실행문;
}while(조건식);
*최소 한번은 실행되는 반복문
-break 
*반복문을 빠져나가는 역할/switch문을 빠져나가는 역할
*if문과 같이 쓰임
-continue
*continue를 만나면 for문의 경우 증감연산식으로, while문 경우 조건식
-1부터 10까지의 짝수의 합을 continue를 이용하여 작성하세요.

6.클래스:데이터를 편하게 관리 하기 위해
-멤버변수
-멤버메서드
-생성자

-메서드:기능=>입력정보(매개변수)=>결과(리턴타입)
*기능정리
*매개변수:메서드를 실행하기 위해 필요한 최소한의 정보
*리턴타입:기능이 실행된 후 알려줘야하는 정보
*메소드명

-메서드를 만드는 이유
*재사용성을 높여서 코드의 길이를 줄임
*유지보수를 쉽게 하기 위해

-메서드 오버로딩:이름이 같은 메서드가 여러개인 경우
*매개변수가 다를 때
 *매개변수의 타입이 다른 경우
 *매개변수의 갯수가 다른 경우

-클래스 멤버(static)
*모든 객체들이 공유하는 멤버
*객체를 생성하지 않고 호출
*클래스를 사용할 때
-객체 멤버
*각 객체마다 멤버를 가지고 있다.
*객체를 생성한 후에 호출
*객체를 생성할 때 (new 연산자를 통해)

클래스 멤버 변수를 클래스 멤버 메서드에서 호출할 수 있다.O
클래스 멤버 변수를 객체 맴버 메서드에서 호출할 수 있다.O
객체 멤버 변수를 객체 멤버 메서드에서 호출할 수 있다.O
객체 멤버 변수를 클래스 멤버 메서드에서 호출할 수 있다.X