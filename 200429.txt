
상속
-부모 클래스의 멤버 변수나 메서드를 자식클래스가 물려 받는 것
-상속에서 부모클래스는 하나만 가능하다.

-부모의 멤버 변수나 메서드의 접근제한자가 private은 자식 클래스가 사용할 수 없다.
=>private으로 된 멤버 변수의 경우 getter와 setter를 만들어서 접근한다.

-자식의 클래스의 생성자에서 부모 클래스의 생성자를 super()를 통해 호출할 수 있다.

-상속은 꼭 해야하는건 아니다. 상속을 하면 코드를 재사용 할 수 있기 때문에 상속 받을 수 있으면 받자.

도형	:부모
원	:자식
삼각형	:자식
사각형	:자식

-static 메서드(클래스 메서드)는 다형성이 적용되지 않아 오버라이딩이 안된다. 하지만 해당 메소드를 작성할 수는
있는데 이런 상황을 하이딩이라고 한다.

클래스
-클래스의 생성자가 하나도 없다면 클래스가 메모리에 올라갈 때 기본 생성자가 추가된다.

오버로딩:동일한 이름을 가진 메서드/생성자가 여러개 존재하는 것

-인스턴스(객체)메서드는 클래스 메서드에서 사용할 수 없다.
=>클래스 메서드는 객체를 만들지 않고 사용가능하나 인스턴스 메서드는 
인스턴스를 생성하고 난 뒤에 사용하기 때문에 불가능

final
-변수	:상수
-메서드	:오버라이딩을 할 수 없다.
-클래스	:부모 클래스가 될 수 없다. 누군가의 자식 클래스는 될 수 있다.

재귀 메서드
-메서드 안에서 자신을 호출하는 형태의 메서드
-재귀 메서드는 빠져 나가기 위한 조건을 걸어줘야 한다.
-재귀 메서드를 사용하기 전에 반복문을 이용하여 먼저 해결 해보고 반복문을 이용하여 복잡하게 코드를 작성하는 것
보다 재귀 메서드를 이용하여 간결하게 작성하는것이 좋다고 생각하면 그 때 재귀 메서드를 이용해라.

-상속에서 실수 할 수 있다.

1부터 10까지 합을 구하는 코드를 재귀메서드로 작성해보세요